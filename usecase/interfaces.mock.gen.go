// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/interfaces.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUsecases is a mock of UserUsecases interface.
type MockUserUsecases struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecasesMockRecorder
}

// MockUserUsecasesMockRecorder is the mock recorder for MockUserUsecases.
type MockUserUsecasesMockRecorder struct {
	mock *MockUserUsecases
}

// NewMockUserUsecases creates a new mock instance.
func NewMockUserUsecases(ctrl *gomock.Controller) *MockUserUsecases {
	mock := &MockUserUsecases{ctrl: ctrl}
	mock.recorder = &MockUserUsecasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecases) EXPECT() *MockUserUsecasesMockRecorder {
	return m.recorder
}

// GetUserProfile mocks base method.
func (m *MockUserUsecases) GetUserProfile(ctx context.Context, input GetUserProfileInput) (GetUserProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", ctx, input)
	ret0, _ := ret[0].(GetUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUserUsecasesMockRecorder) GetUserProfile(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserUsecases)(nil).GetUserProfile), ctx, input)
}

// LoginUser mocks base method.
func (m *MockUserUsecases) LoginUser(ctx context.Context, input LoginUserInput) (LoginUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, input)
	ret0, _ := ret[0].(LoginUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserUsecasesMockRecorder) LoginUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserUsecases)(nil).LoginUser), ctx, input)
}

// RegisterUser mocks base method.
func (m *MockUserUsecases) RegisterUser(ctx context.Context, input RegisterUserInput) (RegisterUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, input)
	ret0, _ := ret[0].(RegisterUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserUsecasesMockRecorder) RegisterUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserUsecases)(nil).RegisterUser), ctx, input)
}

// UpdateUserProfile mocks base method.
func (m *MockUserUsecases) UpdateUserProfile(ctx context.Context, input UpdateUserProfileInput) (UpdateUserProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", ctx, input)
	ret0, _ := ret[0].(UpdateUserProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockUserUsecasesMockRecorder) UpdateUserProfile(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockUserUsecases)(nil).UpdateUserProfile), ctx, input)
}

// ValidateUserToken mocks base method.
func (m *MockUserUsecases) ValidateUserToken(ctx context.Context, input ValidateUserTokenInput) (ValidateUserTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUserToken", ctx, input)
	ret0, _ := ret[0].(ValidateUserTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateUserToken indicates an expected call of ValidateUserToken.
func (mr *MockUserUsecasesMockRecorder) ValidateUserToken(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUserToken", reflect.TypeOf((*MockUserUsecases)(nil).ValidateUserToken), ctx, input)
}
